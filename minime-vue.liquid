{{ 'style.css' | asset_url | stylesheet_tag }}
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.666.0.min.js" async></script>
<script type="text/javascript" src="https://static.filestackapi.com/filestack-js/1.x.x/filestack.min.js" async></script>
<script src="https://unpkg.com/vue@next"></script>
<script src="{{ 'my-lib.umd.js' | asset_url }}"></script>

<!-- 提交表单 -->
<div id="extendForm"></div>

<!-- 肤色选择 -->
<div class="skin-selector">
  <!-- <p class="skin-selector__title">肤色</p>
  <p class="skin-selector__desc">肤色选择</p> -->

  <div class="color-selector-wrapper">
    <p class="color-title">Choose Your Skin Color</p>
    <p class="color-desc">The face color will be made according to the photo you upload, please choose the skin tone of
      the exposed body!</p>
    <nav class="color-selector">
      <p class="color-item active" _value="white" style="background-color: #faebd5;">
        <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M511.33 32.22c-265.1 0-480 214.9-480 480s214.9 480 480 480 480-214.9 480-480-214.9-480-480-480z m245.88 372.65L461.85 702.75 270.46 510.47c-15.58-15.66-15.53-40.98 0.13-56.57 15.66-15.58 40.98-15.53 56.57 0.13l134.58 135.21 238.66-240.7c15.56-15.69 40.88-15.79 56.57-0.24 15.69 15.56 15.8 40.89 0.24 56.57z"
            p-id="2302"></path>
        </svg>
      </p>
      <p class="color-item" _value="black" style="background-color: #986e59;">
        <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M511.33 32.22c-265.1 0-480 214.9-480 480s214.9 480 480 480 480-214.9 480-480-214.9-480-480-480z m245.88 372.65L461.85 702.75 270.46 510.47c-15.58-15.66-15.53-40.98 0.13-56.57 15.66-15.58 40.98-15.53 56.57 0.13l134.58 135.21 238.66-240.7c15.56-15.69 40.88-15.79 56.57-0.24 15.69 15.56 15.8 40.89 0.24 56.57z"
            p-id="2302"></path>
        </svg>
      </p>
      <p class="color-item" _value="yellow" style="background-color: #f7d8aa;">
        <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M511.33 32.22c-265.1 0-480 214.9-480 480s214.9 480 480 480 480-214.9 480-480-214.9-480-480-480z m245.88 372.65L461.85 702.75 270.46 510.47c-15.58-15.66-15.53-40.98 0.13-56.57 15.66-15.58 40.98-15.53 56.57 0.13l134.58 135.21 238.66-240.7c15.56-15.69 40.88-15.79 56.57-0.24 15.69 15.56 15.8 40.89 0.24 56.57z"
            p-id="2302"></path>
        </svg>
      </p>
    </nav>
  </div>
</div>

<!-- 打开按钮 -->
<div id="customOpenButton" class="custom-open-button disabled">
  <p class="text">CUSTOM NOW</p>
  <div class="button__loading">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
  </div>
</div>

<script>
  // 全局配置
  const PLUGIN_TYPE = "PLUG_BODY_CUSTOM";
  const WEBSITE = "TEST";
  const product = {{ product | json }};
  console.log('产品的type：', product.type);
  console.log('产品的完整属性：', product);

  /**************************************
   ***************** Vue ****************
   **************************************/
  // 添加app节点到body上
  $('body').append('<div id="app"></div>');
  // 实列
  const app = Vue.createApp({
    data() {
      return {
        config: {},
        visible: false,
        loaded: false
      }
    },

    watch: {
      visible(val) {
        if (val) {
          $("body").css('overflow', 'hidden');
        } else {
          $("body").css('overflow', 'auto');
        }
      }
    },

    async mounted() {
      // 设置加载状态
      this.setLoaded(false);
      // 请求数据
      this.config = await getConfig();
      // 设置加载状态
      this.setLoaded(true);
      // 设置初始化选项
      this.setInitOption(this.config);
      // 绑定点击事件
      this.bindOpenButton();
      // 绑定肤色选择事件
      this.bindSkinSelect();
      // 获取激活的尺寸index
      this.getSizeActiveName(this.config);
      // 获取激活的背景index
      this.getBackgroundActiveName(this.config);
    },

    methods: {
      // 设置加载完成
      setLoaded(flag) {
        this.loaded = flag;
        this.disabledOpenButton(flag);
      },

      // 设置初始化选项
      setInitOption(config) {
        const { slides } = config.currentProductTypeConfig;
        if (slides && slides.visible) {
          this.changeSlides('single');
        }
      },

      // 完成
      async complete(data) {
        $('#extendForm').empty();
        this.setExtendForm(data.files);
        this.setStatisticalForm(data.body);
        await this.dealIncrement(data.increment);
        this.changeProductOptionsValue(data.productOptionsValue);
        $('.product-form__cart-submit').trigger('click');
      },

      // 设置扩展表单属性
      setExtendForm(files) {
        const map = {
          ai: 'Ai',
          preview: 'Preview',
          raw: 'Original'
        }

        // 遍历所有图片
        for (let i in files) {
          const value = files[i];
          const name = map[i];
          const $input = $(`<input type="hidden" name="properties[${name}]"></input>`);
          $input.val(value);
          $('#extendForm').append($input);
          this.visible = false;
        }

        // 产品显示的预览图
        const $input = $(`<input type="hidden" name="properties[visibleKey]"></input>`);
        $input.val('Preview');
        $('#extendForm').append($input);
      },

      // 设置统计表单
      setStatisticalForm(data) {
        const { groupName, name, url, id } = data;

        // const $website = $(`<input type="hidden" name="properties[webSite]"></input>`);
        // $website.val(WEBSITE);
        // $('#extendForm').append($website);

        // const $groupName = $(`<input type="hidden" name="properties[productCategory]"></input>`);
        // $groupName.val(groupName);
        // $('#extendForm').append($groupName);

        // const $name = $(`<input type="hidden" name="properties[productName]"></input>`);
        // $name.val(name);
        // $('#extendForm').append($name);

        // const $url = $(`<input type="hidden" name="properties[templateUrl]"></input>`);
        // $url.val(url);
        // $('#extendForm').append($url);

        const $url = $(`<input type="hidden" name="properties[_bodyTemplateOption]"></input>`);
        const params = {
          webSite: WEBSITE,
          productCategory: groupName,
          productName: name,
          templateUrl: url
        }
        $url.val(JSON.stringify(params));
        $('#extendForm').append($url);
      },

      // 处理扩展信息
      dealIncrement(list) {
        const queue = [];

        for (const item of list) {

          // 单双面
          if (item.name === 'slides') {
            this.changeSlides(item.value);
          }

          // 背景
          if (item.name === 'background') {
            const { background, composing, size } = item.value;
            this.changeBackground('Color', background.title);
            // this.changeBackground('Size', size.title);
          }

          // 文字
          if (item.name === 'text' && item.value) {
            queue.push(this.addCustomText({
              id: item.data.id,
              url: item.data.url,
              text: item.value
            }));
          }

          // vip
          if (item.name === 'vip' && item.value) {
            queue.push(this.addVIP(item.data.id));
          }

          // 关联产品
          if (item.name === 'relatedProduct' && item.value.length !== 0) {
            for (const id of item.value) {
              const currentProduct = item.data.find(product => product.id === id);
              queue.push(this.addRelatedProduct(currentProduct));
            }
          }
        }

        return new Promise((resolve) => {
          Promise.all(queue).then(() => {
            resolve();
          });
        })
      },

      // 修改单双面
      changeSlides(slides) {
        const $select = getSelectDom('Type');
        if (!$select) {
          return;
        }

        const val = slides === 'double' ? "Double Side" : "Single Side";
        $select.val(val).trigger('change');
      },

      // 修改背景尺寸
      changeBackground(key, title) {
        const $select = getSelectDom(key);
        if (!$select) {
          return;
        }

        const _this = this;
        $select.children('option').each(function () {
          if ($(this).attr('value') === title) {
            $select.val(title).trigger('change');
            setActiveRadio(key, title);
          }
        })
      },

      // 添加vip
      async addVIP(id) {
        // 添加主商品字段
        const randomID = this.getRandomID();
        const $input = $(`<input type="hidden" name="properties[_tempVip]"></input>`);
        $input.val(randomID);
        $('#extendForm').append($input);
        // 加入购物车
        await this.addToCart({
          id,
          quantity: 1,
          "properties[_tempVip]": randomID,
          mask: 'body',
          refresh: true,
        })
        return Promise.resolve();
      },

      // 添加附加商品
      async addRelatedProduct(product) {
        const { id, url } = product;
        // 添加主商品字段
        const randomID = this.getRandomID();
        const $input = $(`<input type="hidden" name="properties[_related_product]"></input>`);
        $input.val(randomID);
        $('#extendForm').append($input);
        // 加入购物车
        await this.addToCart({
          id,
          quantity: 1,
          "properties[Preview]": url,
          "properties[_related_product]": randomID,
          mask: 'body',
          refresh: true,
        });
        return Promise.resolve();
      },

      // 添加文字定制
      async addCustomText(data) {
        const { id, url, text } = data;
        // 添加主商品字段
        const randomID = this.getRandomID();
        const $input = $(`<input type="hidden" name="properties[_related_product]"></input>`);
        $input.val(randomID);
        $('#extendForm').append($input);
        // 加入购物车
        await this.addToCart({
          id,
          quantity: 1,
          "properties[Preview]": url,
          "properties[text]": text,
          "properties[_related_product]": randomID,
          mask: 'body',
          refresh: true,
        });
        return Promise.resolve();
      },

      // 修改属性值
      changeProductOptionsValue(data) {
        Object.keys(data).forEach(key => {
          const $select = getSelectDom(key);
          if (!$select) {
            return;
          }

          const _this = this;
          const title = data[key];
          $select.children('option').each(function () {
            if ($(this).attr('value') === title) {
              $select.val(title).trigger('change');
              setActiveRadio(key, title);
            }
          })
        })
      },

      // 加入购物车
      addToCart(data) {
        return new Promise((resolve, reject) => {
          $.ajax({
            type: "POST",
            url: "/cart/add.js",
            data,
            async: false,
            dataType: "json",
            context: this,
            success: res => {
              resolve(res)
            },
            error: (request, status) => {
              reject(request, status);
            }
          })
        })
      },

      // 随机ID
      getRandomID(length = 8) {
        return Number(Math.random().toString().substr(3, length) + Date.now()).toString(36);
      },

      // 绑定点击事件
      bindOpenButton() {
        $("#customOpenButton").click(() => {
          if (this.loaded) {
            const sku = $(".variant-sku").text();
            const price = product.variants.find(item => item.sku === sku).price;
            this.config.productPrice = `$${(price / 100)}`;
            this.config.productTitle = product.title;
            this.config.skuList = this.getSKUlist();
            this.config.productOptionsValue = this.getProductOptionsValue();
            this.visible = true;
          }
        })
      },

      // 绑定肤色选择
      bindSkinSelect() {
        $(".color-item").on('click', (e) => {
          const item = $(e.currentTarget);
          item.addClass('active').siblings('.color-item').removeClass('active');
          const value = item.attr('_value');
          this.config.defaultSkin = value;
        })
      },

      // 设置按钮可点击
      disabledOpenButton(flag) {
        if (flag) {
          $("#customOpenButton").removeClass('disabled');
        } else {
          $("#customOpenButton").addClass('disabled');
        }
      },

      // 获取激活的尺寸index
      getSizeActiveName(config) {
        const { background } = config.currentProductTypeConfig;

        if (!background) {
          return;
        }

        if (!background.visible) {
          return;
        }

        const size = background.size;

        // 色块
        const $select = getSelectDom('Size');
        if ($select) {
          // 已经初始化赋值了
          if ($select.val()) {
            this.sizeActiveName = $select.val()
          }
          // 监听change
          $select.on('change', () => {
            this.sizeActiveName = $select.val()
          })
        }
      },

      // 获取激活的背景index
      getBackgroundActiveName(config) {
        const { background } = config.currentProductTypeConfig;

        if (!background) {
          return;
        }

        if (!background.visible) {
          return;
        }

        const backgroundList = background.data;

        // 背景图
        const { tags } = product;
        const tag = tags.find(tag => tag.includes('bg-'));
        if (tag) {
          this.backgroundActiveName = tag;
          return;
        }

        // 色块
        const $select = getSelectDom('Color');
        if ($select) {
          // 已经初始化赋值了
          if ($select.val()) {
            this.backgroundActiveName = $select.val();
          }
          // 监听change
          $select.on('change', () => {
            this.backgroundActiveName = $select.val();
          })
        }
      },

      // 获取所有sku选项
      getSKUlist() {
        const typeKeys = product.options.map((key) => {
          const arr = key.split(/[\:\?]/);
          return arr[0] ? arr[0] : "";
        });
        const list = [];
        for (const variant of product.variants) {
          const { price, options, id, sku } = variant;

          const obj = {
            price,
            id,
            sku,
            options: {},
          };

          for (let i = 0; i < typeKeys.length; i++) {
            const key = typeKeys[i];
            obj.options[key] = options[i];
          }

          list.push(obj);
        }
        return list;
      },

      // 获取所有选项值
      getProductOptionsValue() {
        const typeKeys = product.options.map((key) => {
          const arr = key.split(/[\:\?]/);
          return arr[0] ? arr[0] : "";
        });

        const obj = {};
        for (const key of typeKeys) {
          const $select = getSelectDom(key);
          const value = $select ? $select.val() : '';
          obj[key] = value;
        }
        return obj;
      }

    },

    render() {
      if (this.loaded && this.visible) {
        return Vue.h(
          MinimePillow,
          {
            config: this.config,
            sizeActiveName: this.sizeActiveName,
            backgroundActiveName: this.backgroundActiveName,
            onClose: () => {
              this.visible = false;
            },
            onComplete: this.complete
          }
        )
      }
    }
  })

  // 挂载到app上
  app.mount('#app');


  /*****************************************
   ***************** 通用方法 ***************
   *****************************************/
  // 获取配置参数
  function getConfig() {
    let config = {};
    const url = `https://sback.globalhot.shop/plugins/api/v1/configure?webSite=${WEBSITE}&plugType=${PLUGIN_TYPE}`;

    return new Promise((resolve, reject) => {
      $.ajax(url, {
        success: res => {
          const { status, data } = res;
          if (status === '0') {
            const configItem = data[0] || {};
            if (!configItem) {
              return;
            }
            config = JSON.parse(configItem.configure);
            config.website = WEBSITE;
            config.defaultSkin = 'white';
            getProductConfig(config, product.type);
            topBodyCard(config);

            resolve(config);
          }
        },
        error: msg => {
          reject(msg);
        }
      })
    });
  }

  // 获取当前增量
  function getProductConfig(config, type) {
    const currentConfig = config.productTypeConfigList.find(
      (item) => item.type === type
    );

    if (!currentConfig) {
      config.currentProductTypeConfig = {};
      return;
    }

    config.currentProductTypeConfig = currentConfig;
    // background
    config.currentProductTypeConfig.background.data = (
      config.currentProductTypeConfig.background.data || []
    ).map((title) => {
      return config.backgroundList.find((item) => item.title === title);
    });
    // composing
    config.currentProductTypeConfig.background.composingList = (
      config.currentProductTypeConfig.background.composing || []
    ).map((title) => {
      return config.composingList.find((item) => item.title === title);
    });
  }

  // 置顶当前身体
  function topBodyCard(config) {
    let currentItem = {};
    for (let i = 0; i < config.miniMeData.length; i++) {
      const group = config.miniMeData[i];
      for (let j = 0; j < group.images.length; j++) {
        const image = group.images[j];
        if (String(image.id) === String(getTagID())) {
          currentItem = image;
        }
      }
    }
    const firstGroup = config.miniMeData[0];
    firstGroup.images.unshift(currentItem);
  }

  // 获取当前TagID
  function getTagID() {
    var tags = "{{ product.tags | join:',' }}";
    var optionResult = tags.match(/mini-me-default-\d+/);
    var _number = optionResult && Number(optionResult[0].split("-").pop());
    return isNaN(_number) ? "" : _number;
  }

  // 获取JQselect表单
  function getSelectDom(name) {
    let dom = null;
    $('.product-form__item').each(function () {
      const item = $(this);
      const title = item.children('label').text().trim();
      if (title.includes(name)) {
        dom = item.children('select');
      }
    })
    return dom;
  }

  // 设置激活选项
  function setActiveRadio(name, value) {
    $('.option-wrapper').each(function () {
      const item = $(this);
      const title = item.children('.inline-option-title').text().trim();
      if (name === title) {
        item.find('.inline-label').each(function () {
          const label = $(this);
          const radio = label.find('input[type=radio]');
          if (radio.attr('value') === value) {
            radio.attr('checked', 'checked');
            label.addClass('active-label');
          } else {
            radio.attr('checked', '');
            label.removeClass('active-label');
          }
        })
      }
    })
  }
</script>

<style>
  .custom-open-button {
    height: 40px;
    background: linear-gradient(90deg, green, green);
    border-radius: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: .3s;
    text-shadow: 1px 1px 5px #666666;
    filter: grayscale(0);
    margin-top: 10px;
  }

  .custom-open-button .text {
    font-size: 16px;
    color: #ffffff;
    letter-spacing: 1px;
    display: block;
    margin-bottom: 0;
    line-height: 1;
    font-family: 'Antique Olive';
  }

  .custom-open-button.disabled {
    filter: grayscale(1);
  }

  .custom-open-button.disabled .text {
    display: none;
  }

  .custom-open-button.disabled .button__loading {
    display: flex;
  }

  .button__loading {
    height: 10px;
    display: none;
  }

  .button__loading span {
    display: block;
    width: 10px;
    height: 100%;
    margin: 0 5px;
    border-radius: 50%;
    background: lightgreen;
    animation: load 1.04s ease infinite;
  }

  @-webkit-keyframes load {
    0% {
      opacity: 1;
    }

    100% {
      opacity: 0;
    }
  }

  .button__loading span:nth-child(1) {
    -webkit-animation-delay: 0.13s;
  }

  .button__loading span:nth-child(2) {
    -webkit-animation-delay: 0.26s;
  }

  .button__loading span:nth-child(3) {
    -webkit-animation-delay: 0.39s;
  }

  .button__loading span:nth-child(4) {
    -webkit-animation-delay: 0.52s;
  }

  .button__loading span:nth-child(5) {
    -webkit-animation-delay: 0.65s;
  }

  /* 肤色 */
  .color-selector-wrapper {
    padding: 20px 0;
  }

  .color-selector-wrapper .color-title {
    font-size: 16px;
    font-weight: 600;
    color: #333333;
    line-height: 1.2;
    margin-bottom: 5px;
  }

  .color-selector-wrapper .color-desc {
    font-size: 12px;
    color: #666666;
    line-height: 1.2;
    margin-bottom: 10px;
  }

  .color-selector-wrapper .color-selector {
    display: flex;
    flex-wrap: wrap;
  }

  .color-selector-wrapper .color-selector .color-item {
    width: 70px;
    height: 40px;
    border-radius: 4px;
    border: 2px solid #f2f2f2;
    font-size: 12px;
    color: #fff;
    display: grid;
    place-items: center;
    cursor: pointer;
    margin-bottom: 0;
    margin-right: 5px;
  }

  .color-selector-wrapper .color-selector .color-item svg {
    width: 16px;
    height: 16px;
    fill: #ff533a;
    display: none;
  }

  .color-selector-wrapper .color-selector .color-item.active {
    border: 2px solid #ff533a;
  }

  .color-selector-wrapper .color-selector .color-item.active svg {
    display: block;
  }

  /* 隐藏不需要的表单 */
  .hide-option {
    display: none !important;
  }

  /* 隐藏不需要的 */
  .product-form__item--submit,
  .confirm-payment-button,
  .product-vip-gift-box-div {
    display: none !important;
  }
</style>